function test_tlines_2
% Test of handling of multiple tline chains - based on a bug

    z = ...
    [  0.0000000   0.0005000   0.0005010   0.0010010 ; ...
       0.0000000   0.0005000   0.0005010   0.0010010 ; ...
       0.0000000   0.0005000   0.0005010   0.0010010 ; ...
       0.0000000   0.0005000   0.0005010   0.0010010 ; ...
       0.0000000   0.0005000   0.0005010   0.0010010 ; ...
       0.0000000   0.0005000   0.0005010   0.0010010 ; ...
       0.0000000   0.0005000   0.0005010   0.0010010 ; ...
       0.0000000   0.0005000   0.0005010   0.0010010 ; ...
       0.0000000   0.0005000   0.0005010   0.0010010 ; ...
       0.0000000   0.0005000   0.0005010   0.0010010 ; ...
       0.0000000   0.0005000   0.0005010   0.0010010 ; ...
       0.0000000   0.0005000   0.0005010   0.0010010 ; ...
       0.0000000   0.0005000   0.0005010   0.0010010 ; ...
       0.0000000   0.0005000   0.0005010   0.0010010 ; ...
       0.0000000   0.0005000   0.0005010   0.0010010 ; ...
       0.0000000   0.0005000   0.0005010   0.0010010 ];

    Z0 = ...
   [  3.7673e+002 + 0.0000e+000i  3.7673e+002 + 0.0000e+000i 3.7673e+002 + 0.0000e+000i ; ...
      0.0000e+000 - 1.1294e+006i  0.0000e+000 - 1.1294e+006i 0.0000e+000 - 1.1294e+006i ; ...
      0.0000e+000 - 2.2588e+006i  0.0000e+000 - 2.2588e+006i 0.0000e+000 - 2.2588e+006i ; ...
      0.0000e+000 - 3.3882e+006i  0.0000e+000 - 3.3882e+006i 0.0000e+000 - 3.3882e+006i ; ...
      0.0000e+000 - 1.1294e+006i  0.0000e+000 - 1.1294e+006i 0.0000e+000 - 1.1294e+006i ; ...
      0.0000e+000 - 1.5972e+006i  0.0000e+000 - 1.5972e+006i 0.0000e+000 - 1.5972e+006i ; ...
      0.0000e+000 - 2.5254e+006i  0.0000e+000 - 2.5254e+006i 0.0000e+000 - 2.5254e+006i ; ...
      0.0000e+000 - 3.5715e+006i  0.0000e+000 - 3.5715e+006i 0.0000e+000 - 3.5715e+006i ; ...
      0.0000e+000 - 2.2588e+006i  0.0000e+000 - 2.2588e+006i 0.0000e+000 - 2.2588e+006i ; ...
      0.0000e+000 - 2.5254e+006i  0.0000e+000 - 2.5254e+006i 0.0000e+000 - 2.5254e+006i ; ...
      0.0000e+000 - 3.1945e+006i  0.0000e+000 - 3.1945e+006i 0.0000e+000 - 3.1945e+006i ; ...
      0.0000e+000 - 4.0721e+006i  0.0000e+000 - 4.0721e+006i 0.0000e+000 - 4.0721e+006i ; ...
      0.0000e+000 - 3.3882e+006i  0.0000e+000 - 3.3882e+006i 0.0000e+000 - 3.3882e+006i ; ...
      0.0000e+000 - 3.5715e+006i  0.0000e+000 - 3.5715e+006i 0.0000e+000 - 3.5715e+006i ; ...
      0.0000e+000 - 4.0721e+006i  0.0000e+000 - 4.0721e+006i 0.0000e+000 - 4.0721e+006i ; ...
      0.0000e+000 - 4.7917e+006i  0.0000e+000 - 4.7917e+006i 0.0000e+000 - 4.7917e+006i ];

    k = ...
   [  0.0000e+000 + 1.0479e-001i  0.0000e+000 + 1.0479e-001i 0.0000e+000 + 1.0479e-001i ; ...
      3.1416e+002 + 0.0000e+000i  3.1416e+002 + 0.0000e+000i 3.1416e+002 + 0.0000e+000i ; ...
      6.2832e+002 + 0.0000e+000i  6.2832e+002 + 0.0000e+000i 6.2832e+002 + 0.0000e+000i ; ...
      9.4248e+002 + 0.0000e+000i  9.4248e+002 + 0.0000e+000i 9.4248e+002 + 0.0000e+000i ; ...
      3.1416e+002 + 0.0000e+000i  3.1416e+002 + 0.0000e+000i 3.1416e+002 + 0.0000e+000i ; ...
      4.4429e+002 + 0.0000e+000i  4.4429e+002 + 0.0000e+000i 4.4429e+002 + 0.0000e+000i ; ...
      7.0248e+002 + 0.0000e+000i  7.0248e+002 + 0.0000e+000i 7.0248e+002 + 0.0000e+000i ; ...
      9.9346e+002 + 0.0000e+000i  9.9346e+002 + 0.0000e+000i 9.9346e+002 + 0.0000e+000i ; ...
      6.2832e+002 + 0.0000e+000i  6.2832e+002 + 0.0000e+000i 6.2832e+002 + 0.0000e+000i ; ...
      7.0248e+002 + 0.0000e+000i  7.0248e+002 + 0.0000e+000i 7.0248e+002 + 0.0000e+000i ; ...
      8.8858e+002 + 0.0000e+000i  8.8858e+002 + 0.0000e+000i 8.8858e+002 + 0.0000e+000i ; ...
      1.1327e+003 + 0.0000e+000i  1.1327e+003 + 0.0000e+000i 1.1327e+003 + 0.0000e+000i ; ...
      9.4248e+002 + 0.0000e+000i  9.4248e+002 + 0.0000e+000i 9.4248e+002 + 0.0000e+000i ; ...
      9.9346e+002 + 0.0000e+000i  9.9346e+002 + 0.0000e+000i 9.9346e+002 + 0.0000e+000i ; ...
      1.1327e+003 + 0.0000e+000i  1.1327e+003 + 0.0000e+000i 1.1327e+003 + 0.0000e+000i ; ...
      1.3329e+003 + 0.0000e+000i  1.3329e+003 + 0.0000e+000i 1.3329e+003 + 0.0000e+000i ];

% Matched termination at both ends
Gls1=0;
GgrN=0;

% Run the coefficients precomputation
tl = calc_tlines(z, Z0, k, Gls1, GgrN);

for iobs=1:3
    for jsrc=1:3
	zsrc=tl.z(1,jsrc)+tl.d(1,jsrc)*0.6;
	n=100;
	zi=linspace(tl.z(1,iobs), tl.z(1,iobs+1), n);
	dl=tl.d(1,iobs)/n;
	test_ii = 0;
	for i=1:n
	    test_ii = test_ii + calc_ii(tl, zi(i), iobs, zsrc, jsrc)*dl;
	end
	ii = calc_iii(tl, iobs, 0, 1, zsrc, jsrc);
	tol = 1e-14+max(abs(ii))*5e-4;
	assertEquals(test_ii, ii, tol);
      end
end

